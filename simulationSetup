In this file do not use the equal sign in a comment because that is the trigger to read an input.
The units we use are:
Length millimeter mm
Mass gram g
time millisecond ms

Read from NodesMuscles file (0) or read from a previous run (1).
NodesMusclesFileOrPreviousRunsFile = 1;

Name of the files that holds the nodes and muscles. 
Line11
Circle24
Circle200
CSphere340
CSphere5680
IdealLeftAtrium2.3K
IdealLeftAtrium13.0KNotTriangle
LeftAtriumRealBase
LeftAtriumRealRemovedAppendage
LeftAtriumRealPartialAppendage
TheRock
The code is not currently written for models with depth but it does work on them. Us the 3D models with this in mind.
3DIdealLAtrium2.3K
3DIdealLAtrium13K

Place the Nodes and Mucsle file you would like to run here.
InputFileName = IdealLeftAtrium2.3K

Place the name of the previous run file you would like to run here.
The three run files below are just examples for demonstration purposes.
When you have your own run file place the name after the equals sign. 
test1
PreviousRunFileName = test1

Note: you will only read from a (nodes and muscle file) or from a (previuos run file) not both.

Connection width for for the lines that represent muscles connecting the nodes. 
1.0 to 3.0 looks good for spheres and 5.0 to 10.0 for circles. (float)	
LineWidth = 3.0;

Set the size of the node sphere here. It is scaled by the RadiusOfLeftAtrium a good value is 0.01. (float)
NodeRadiusAdjustment = 0.01;

What we are using for the mass of a myocyte. Myocytes are approximately 80-100 micrometers or 0.08-.1 millimeters in length
and 10-20 micrometers or 0.01-0.02 millimeters in width (Chapter 12 - Cardiovascular and Skeletal Muscle Systems
Author links open overlay panelWanda M.HaschekColin G.RousseauxMatthew A.Wallig). Treating the myocyte as a cylinder with length 0.09 mm and diameter 0.015 mm
you get a volume of pi*((0.015/2)^2)*0.09 which is 0.00001590431281 mm^3. 
The clinically accepted value of myocardial tissue density is 1.055â€‰g/ml (https://bmcmedimaging.biomedcentral.com/articles/10.1186/s12880-019-0326-4).
This gives the mass of a myocyte as 1.6779E-8 grams
The contraction force of myocyte is about 10 micro Newtons (not sure where Avery got this need to site it.) This 1e-5 g*mm/ms^2.
This gives force per mass of a myocyte as 596 mm/ms^2. I will use this to scale the contraction force of our muscles. (float)
MyocyteForcePerMass = 596.0;
MyocyteForcePerMassMultiplier = 1.0;
MyocyteForcePerMassSTD = 0.0;

This will be the strength of the central push back force which will simulate blood pressure.
Our units for pressure are grams/(Millimeters*(Millisecons^2)).
1 millimeters of mercury is 133.322387415 Pascals which is in kg/(meters*seconds*seconds).
Putting this into our units of grams, milliseconds, millimeters gives 0.01333224.
So 1 millimeter of Mercury is 0.000133322387415 in our units of g/(mm*ms*ms)
Here just enter the pressure in the left or right atrium in millimeters of Mercury and we will fix the units in the code.
To get the force on the node we will need an area to multiply the pressure by.
We used a circle of half the average distance to all the connected nodes as the area.
You are losing some area so we divided the lost area proportionally amount the nodes by (area of node)/(total area of sphere).
A reasonable pressure range for the left Atrium is 4 to 12 mmHg.
DiastolicPressureLA = 4.0;
SystolicPressureLA = 12.0;
PressureMultiplier = 10.0;

A good mass for the Left atria is 25 grams and a good mass for the right atrium is 22 grams. (float) 
MassOfLeftAtrium = 25.0;

This should be the radius of the Left atriam. ??? The atriam holds around 23640 cubic millimeters of blood which gives a radius of 17.8 millimeters. (float) 
RadiusOfLeftAtrium = 17.8;

We set the drag using the viscusity of a sphere moving through blood. It let the AL move around a little more than disired so this
value is multiplied by the drag so the user can adjust there simulation as desired. The initial drag calculation just gets you in
the ballpark.
DragMultiplier = 100.0;

If you want to turn off muscle contractions and just watch the electrical process you do that be setting this flag to 0.
1 (true) turns the muscle contraction on.
0 (false) turns the muscle contraction off. This will speed the simulation up if you are just studing the electrical action.
ContractionIsOn = 1;

The strength of a relaxed muscle. It is opposite the contraction to help it return to its natural length. 
This should be a small fraction of the contraction force.
It must be less than 1.0 or you will get a relaxed strength greater than your contraction strength. (float)
MuscleRelaxedStrengthFraction = 0.2;

The fraction of a muscles natural length once it is contracted. 
We think it will lose 30% of its length so this should be 0.7. (float)
MuscleCompresionStopFraction = 0.7;
MuscleCompresionStopFractionSTD = 0.0;

The length of time a muscle is contracting and relaxing. 
We think this should be around 300 milliseconds. (float)
BaseMusclerRefractoryPeriod = 300.0;
MuscleRefractoryPeriodSTD = 0.0;

This is the portion of the refractory period that is absolute.
The relative refractory period will be what is left over and will be calculated in the code.
AbsoluteRefractoryPeriodFraction = 0.9;
AbsoluteRefractoryPeriodFractionSTD = 0.0;

The speed of the conduction velocity across a muscle. 
This will scaled by the muscle length to get the time it takes to cross a muscle.
We think this should be around 0.5 millimeters/milliseconds. (float) (0.00125 for micro)
BaseMuscleConductionVelocity = 0.5;
MuscleConductionVelocitySTD = 0.0;

The length of time between heart beats. 
A 1000 milliseconds is 60 beats per minute. (float)
BeatPeriod = 600.0;

How often you print the time to the terminal, in milliseconds. (float)
PrintRate = 100.0;

How often you draw to the screen. How many iterations are run between draws. (int)
DrawRate = 1000;

Your time step 0.0001 to 0.001 or whatever is the fraction of a time unit in each iteration. (float)
Dt = 0.001;

Ready color red, green, blue. (floats)
ReadyRed = 1.0;
ReadyGreen = 0.0;
ReadyBlue = 0.0;

Contracting color red, green, blue. (floats)
ContractingRed = 1.0;
ContractingGreen = 1.0;
ContractingBlue = 0.0;

Resting (second portion of the absolute refractory period 
contracting color took up the first part) color red, green, blue. (floats)
RestingRed = 0.5451;
RestingGreen = 0.2706;
RestingBlue = 0.0745;

Relative Refractory Period color red, green, blue. (floats)
RelativeRed = 1.0;
RelativeGreen = 0.0784;
RelativeBlue = 0.5765;

Dead color red, green, blue. (floats)
DeadRed = 1.0;
DeadGreen = 1.0;
DeadBlue = 1.0;

Background color red, green, blue. (floats)
BackGroundRed = 0.0;
BackGroundGreen = 0.0;
BackGroundBlue = 0.0;

